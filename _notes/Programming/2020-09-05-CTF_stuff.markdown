---
author: philzook58
comments: true
date: 2020-09-05 15:12:24+00:00
layout: post
link: https://www.philipzucker.com/?p=2960
slug: CTF stuff
title: CTF stuff
wordpress_id: 2960
---

- [Reversing](#reversing)
  - [Disassembly](#disassembly)
    - [Interactive](#interactive)
  - [Fuzzing](#fuzzing)
  - [Symbolic Execution](#symbolic-execution)
  - [Vulnerabilities](#vulnerabilities)
  - [Mitigations](#mitigations)
- [Exploits](#exploits)
  - [Buffer Overflows](#buffer-overflows)
  - [Primitives](#primitives)
  - [Return Oriented Programming (ROP)](#return-oriented-programming-rop)
  - [Data Oriented Programming (DOP)](#data-oriented-programming-dop)
  - [Heap](#heap)
  - [Automated Exploit Generation (AEG)](#automated-exploit-generation-aeg)
- [CTF](#ctf)
- [Misc](#misc)
  - [GDB](#gdb)
- [nmap](#nmap)
      - [Digital forensics](#digital-forensics)
      - [pwn.college](#pwncollege)
  - [Intro](#intro)
    - [binary files](#binary-files)
    - [process loading](#process-loading)
- [shellcode](#shellcode)
  - [Protection](#protection)
  - [pwntools](#pwntools)
  - [Examples from pwn.college](#examples-from-pwncollege)


# Reversing 




## Disassembly
disassembler 
linear sweep
recusrive traversal 
anti-disassembly 
https://github.com/AppleReer/Anti-Disassembly-On-Arm64

[relative disassembler performance](https://twitter.com/richinseattle/status/1468418790006267910?s=20)

capstone http://www.capstone-engine.org/ - disassembler. converse of key
zydis
xed
distrom
iced
bddisasm
yaxpeax

McSema - older trail of bits lifter. Uses llvm as IR
[remill](https://github.com/lifting-bits/remill) lift to llvm bitcode
anvill processing remill
rellic makes C like code

BAP
ANGR


Speculative disssembly https://ieeexplore.ieee.org/document/7745279 decode every offset. Refine blocks. Spedi, open source spcualtive disassembler https://github.com/abenkhadra/spedi
Nucleus paper https://mistakenot.net/papers/eurosp-2017.pdf Compiler-Agnostic Function Detection in Binaries

superset disassembler kenneth https://personal.utdallas.edu/~hamlen/bauman18ndss.pdf
civuentes thesis

probablistic disassembly using proabablistic datalog?
bap mc + datalog?

[Formally Verified Lifting of C-Compiled x86-64 Binaries](https://www.ssrg.ece.vt.edu/papers/pldi22.pdf)

### Interactive
IDA
Ghidra
Binary Ninja
Cutter

## Fuzzing
Mayhem
[Fuzzy-sat](https://arxiv.org/pdf/2102.06580.pdf) running smt queries through a fuzzer
Angora
SLF eclipser



[fuzzing challeneges and reflection](https://mboehme.github.io/paper/IEEESoftware20.pdf)

[fuzzing 22](https://twitter.com/c_cadar/status/1521828920869404677?s=20&t=kBQ6NNrdoK-tcIkhvRqktQ)

[google fuzzbench](https://google.github.io/fuzzbench/)

oss-fuzz

[rode0day](https://rode0day.mit.edu/) rolling fuzzing competition

Greybox
- AFL.  [AFL++](https://aflplus.plus/) fork of afl [tutorials](https://github.com/AFLplusplus/AFLplusplus/blob/stable/docs/tutorials.md). compile using afl-clang-fast++ or use qemu mode.
- [libfuzzer](https://llvm.org/docs/LibFuzzer.html) `clagg++ -fsantizer=address,fuzzer myfile.cc` [tutorial](https://github.com/google/fuzzing/blob/master/tutorial/libFuzzerTutorial.md)
- honggfuzz

whitebox
- klee
- sage

[Qsym](https://www.usenix.org/conference/usenixsecurity18/presentation/yun) hybrid fuzzing. concolic execution.

[syzkaller](https://github.com/google/syzkaller) kernel fuzzer
go-fuzz
fuzzili
winafl

Fuzzers compile in extra information to give coverage guidance

Fuzzers use a corpus of input

Using fuzzer to solve csp.
Write checker. Fuzz it. It's randomized search

[Fuzzgym](https://arxiv.org/abs/1807.07490) makes a lot of sense to put neural heuristics in there

## Symbolic Execution
https://github.com/eurecom-s3/symcc
[symqemu](https://github.com/eurecom-s3/symqemu)

[unicorn](https://www.unicorn-engine.org/) - ripped out the heart of qemu and made it programmatically accessible. Based on an old version of qemu though

KLEE


primus - bap's emulator framework

panda https://github.com/panda-re/panda - built on qemu. record and replay executions

[](https://github.com/analysis-tools-dev/dynamic-analysis)

## Vulnerabilities
[CWE](https://cwe.mitre.org/index.html) - common weakenss enumeration

integer overflow https://cwe.mitre.org/data/definitions/190.html

[null pointer dereference](https://cwe.mitre.org/data/definitions/476.html)
## Mitigations
Control Flow integrity is a broad term for many of these 
[CONFIRM: Evaluating Compatibility and Relevance of Control-flow Integrity Protections for Modern Software](https://personal.utdallas.edu/~hamlen/xu19-confirm.pdf)

DEP - data execution prevention [executable space protection](https://en.wikipedia.org/wiki/Executable_space_protection) This says DEP is Windows terminology?
[NX bit](https://en.wikipedia.org/wiki/NX_bit)

shadow stack

stack canary https://www.keil.com/support/man/docs/armclang_ref/armclang_ref_cjh1548250046139.htm -fstack-protector. Guard variable put on stack
SSP stack smashing protection. Stackguard, Propolice. https://embeddedartistry.com/blog/2020/05/18/implementing-stack-smashing-protection-for-microcontrollers-and-embedded-artistrys-libc/
[Buffer overflow protection](https://en.wikipedia.org/wiki/Buffer_overflow_protection)

ASLR ASLP A [Address Space Layout Randomization](https://en.wikipedia.org/wiki/Address_space_layout_randomization). Libraries are linked in at a different location. This make code reuse in an exploit more difficult.

Fat pointers 

[endbr](https://stackoverflow.com/questions/56905811/what-does-the-endbr64-instruction-actually-do) intel control flow enforcement technology (CET). Valid locations for indirect jumps.

ASLR - Addresses are randomized
cat /proc/mem/self ? To look at what actually loaded
Also ldd shows were libraries get loaded in memory
Stack canaries - set once per binary run, so with forking you can brute force them or maybe leak them?

[checksec](https://github.com/slimm609/checksec.sh) tells you about which things are enabled. https://opensource.com/article/21/6/linux-checksec which also has a rundown of the different things and how you could check them manually. Can output into xml, json, csv

gcc options
-no-pie -pie -fpie 
-no-stack-protection
-fstack-protector-all
-z execstack makes stack executable 

RELRO - relocation read only. GOT table becomes read only. Prevents relocation attacks

binary diversification - compiler differently every time. code reuse becomes way harder [diversification](http://www.diva-portal.org/smash/get/diva2:1232129/FULLTEXT01.pdf) make many versions of binary to make code reuse attacks harder. disunison

# Exploits

## Buffer Overflows
[buffer overflow](https://en.wikipedia.org/wiki/Buffer_overflow)
When a buffer overflow occurs you are writing to memory that possibly had a different purpose. Maybe other stack variables, maybe return address pointers, maybe over heap metadata.

Sanitization of user input
Off by one errors
String termination


## Primitives
AWP Arbitrary write primitive [CWE-123: Write-what-where Condition](https://cwe.mitre.org/data/definitions/123.html)
ARP arbitrary read primitive


## Return Oriented Programming (ROP)
[return to libc](https://en.wikipedia.org/wiki/Return-to-libc_attack) libc is very common and
you can weave together libc calls. "Solar Designer"
[solar designer](https://en.wikipedia.org/wiki/Solar_Designer) 1997

[ropc-llvm](https://github.com/programa-stic/ropc-llvm)
[ropc](https://github.com/pakt/ropc)

[smashing the stack for fun and profit](http://phrack.org/issues/49/14.html) - stacks are no longer executable

https://acmccs.github.io/papers/geometry-ccs07.pdf geometry of innocent flesh on the bone. ROP

https://github.com/sashs/Ropper

[rop emporium](https://ropemporium.com/)

[rop ftw](https://www.exploit-db.com/docs/english/28479-return-oriented-programming-(rop-ftw).pdf)

pop_gadget ; value ; nextgadget  loads from stack into register

pure buffer overflow from command line:
```C
#include <stdio.h>
int main(int argc, char *argv[])
{
    char buf[256];
    memcpy(buf, argv[1],strlen(argv[1]));
    printf(buf);
}
```

[ropeme](https://github.com/packz/ropeme)

[angrop](https://github.com/angr/angrop)


## Data Oriented Programming (DOP)

[Block Oriented Programming](https://arxiv.org/pdf/1805.04767.pdf)

## Heap
Heap layout problem
Heap layout manipulation

Metadata

Double free
Use after free

http://phrack.org/issues/61/6.html advanced doug lea malloc hacking


https://milianw.de/blog/heaptrack-a-heap-memory-profiler-for-linux.html
valgrind massif
perf-mem, valgrind massif, and heaptrack

https://heap-exploitation.dhavalkapil.com/

advanced doug lea malloc - phreak post

glibc.
`ldd /bib/ls`
libc.so.6 - symbolic link probably
glibc 2.27
libc-2.31.so actually
pie
You can run it? `/lib/x86_64-linux-gnu/libc.so.6`

malloc
chunks of memory
new/delete make_unique

[heap history viewer](https://github.com/thomasdullien/heap_history_viewer)

## Automated Exploit Generation (AEG)

[sean heelan](https://sean.heelan.io/) [thesis](https://seanhn.files.wordpress.com/2020/11/heelan_phd_thesis.pdf)

usenix security
[heaphopper](https://www.usenix.org/conference/usenixsecurity18/presentation/eckert) angr symbolic analysis for heap exploits?
[archeap](https://github.com/sslab-gatech/ArcHeap)
[maze toward heap feng shui](https://www.usenix.org/system/files/sec21fall-wang-yan.pdf)
[backward search from heaphopper](https://scholar.google.com/scholar?start=0&hl=en&as_sdt=40000005&sciodt=0,22&cites=5560685275836890680&scipsc=)
[teerex](https://www.youtube.com/watch?v=HrrPDyHy7v8&list=PLbRoZ5Rrl5leqxwFLw3lAQ9on-fK5xLea&index=48&ab_channel=USENIX) discover of memory corrupton vulen
[symcc]

# CTF

# Misc

## GDB
- [pwndbg](https://browserpwndbg.readthedocs.io/en/docs/) 
- heap commands. For exminging heap structur


- gef can track malloc and free. That makes sense




<https://twitter.com/peter_a_goodman/status/1503016499824537600?s=20&t=1Z4ew6rnGnFiMTSrQJSmKw> goodman on binary rewriting
binrec - lift program merge lifted bytecode into debloated
egalito 
BOLT
lifting bits/grr



cfi directives - call frame information


joern.io 
https://github.com/RUB-SysSec/EvilCoder automatic bug insertion using joern
phaser
slither

Hiding instructions in instructions
https://lucris.lub.lu.se/ws/portalfiles/portal/78489284/nop_obfs.pdf


Thomas stars https://github.com/bsoddreams?tab=stars

SGX enclaves

obfuscation
[snapchat](https://hot3eed.github.io/2020/06/18/snap_p1_obfuscations.html)
ollvm
vmprotect https://github.com/void-stack/VMUnprotect
opaque preciates - one branch always taken


chris domas https://github.com/xoreaxeaxeax/movfuscator
tom 7




[firmadyne](https://github.com/firmadyne/firmadyne) emulating and analyzing firmware

[dronesploit](https://github.com/dhondta/dronesploit)

burp suite
idor - autorize


bloodhound
 
shellcode encoding and decoding - sometimes you need to avoid things like \0 termination. https://www.ired.team/offensive-security/code-injection-process-injection/writing-custom-shellcode-encoders-and-decoders
Shellcode generators. What do they do?
[shellcode database](http://shell-storm.org/shellcode/)

[google dorking](https://github.com/iGotRootSRC/Dorkers) Like using google with special commands? Why "dork"?
shodan

# nmap
-A -T4. OS detection
nmap nse - nmap scriping engine. There is a folder of scripts

p0f - passive sniffing. fingerprinting



[malware reversing class](https://class.malware.re/)
[live overflow youtube](https://www.youtube.com/watch?v=iyAyN3GFM7A)
[](https://guyinatuxedo.github.io/00-intro/index.html)
[exploit education](https://exploit.education/)
[rop emporium](https://ropemporium.com/)
[linux exploitation course](https://twitter.com/binitamshah/status/1492855772384219138?s=20&t=Fyek6pLGPQrxADkntoVadg)
yara - patterns to recognize malware. Byte level patterns?
Sigma
snort

SIEM
IDS - intrusin detection systems
https://en.wikipedia.org/wiki/Intrusion_detection_system

shellcode encoder/decoder/generator
https://www.msreverseengineering.com/blog/2017/7/15/the-synesthesia-shellcode-generator-code-release-and-future-directions 
synesthesia

FLIRT
https://github.com/avast/retdec



<https://github.com/grimm-co/NotQuite0DayFriday> exploit examples

Gray Hat Hacking
The Shellcoder's handbook
Attacking network Protocols
Implementing Effective Code Review

<https://objective-see.com/blog/blog_0x64.html> 


Hacking:
http://langsec.org/papers/Bratus.pdf sergey weird machine paper

https://github.com/sashs/filebytes

blackhat
defcon
bluehat
ccc
https://en.wikipedia.org/wiki/Security_BSides bsides
ctf
project zero
kpaersky blog https://usa.kaspersky.com/blog/
spectre/meltdown
https://www.youtube.com/watch?v=b7urNgLPJiQ&ab_channel=PinkDraconian

return oriented programming sounds like my backwards pass.
Huh.





#### Digital forensics 

- Volatility <https://www.volatilityfoundation.org/>
- wireshark
- sleuth kit?


radare2, a binary analysis thingo. rax is useful for conversion of hex

binary ninja

ghidra

IDA

RSACTFTool

factordb

manticore

Maybe we should get a docker of all sorts of tools. Kali Linux? [https://github.com/zardus/ctf-tools](https://github.com/zardus/ctf-tools)

klee, afl,  other fuzzers? valgrind

cwe-checker

shellcode

ROP

[https://quipqiup.com/](https://quipqiup.com/) - solve substitution cyphers

[https://github.com/openwall/john](https://github.com/openwall/john) john the ripper. Brute force password cracker

ropper

Best CTFs. I probably don't want the most prestigious ones? They'll be too high level? I want the simple stuff

https://ctf101.org/ - check out the heap exploitation github thing



pwntools

metasploit, pacu - aws, cobalt strike

and the pwn category of ctf

ROP
JOP
SROP
BOP - block oriented

return 2 libc - a subset of rop?


#### pwn.college
ryan chapman syscall 


http://ref.x86asm.net/

https://github.com/revng/revng



privilege escalation - getuid effective id.. Inherit user and group from parent process.
switching to user resets the setuid bit.
sticky bits
id command

shellcode - binary that launchs the shell system call execv("/bin/sh", NULL, NULL) - args and env params

intel vs at&t syntax
Load up addresses
constantrs in binary with .string
gcc -static -nostdlib
objcopy --section .text=outfile 
exiting cleanly is smart. Helps know what is screwing up
ldd 

Trying out shellcode
mmap. mprotect?
read()
deref function pointer

gdb
x for eXamine
$rsi
x/5i $rip gives assembly?
x/gx
break *0xx040404
n next
s step 
ni
si

strace is useful first debugging

## Intro
system calls
set rax to syscall number.
call syscall instruction
https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/
man yada
strace
- fork
- execve
- read
- write
- wait
- brk - program brk. change size of data segment. sbrk by increments. sbrk(0) returns current address of break

stack. rbp, rsp. stack grows down decreasing. Rsp + 0x8 is on stack, rbp - 8 is on stack
most systems are little endian
calling conventions. rdi rsi rdx rcx r8 r9, return in rax
rbx rbp r12 r13 r14 r15 are callee saved. guaranteed not smashed

http://ref.x86asm.net/coder64.html opcode listing
https://github.com/yrp604/rappel - assembly repl
https://github.com/zardus/ctf-tools

### binary files
    file - tells info about file
    elf - interpreter, 
     - sections - text, plt/got resolve and siprach library calls, data preinitilize data, rodata, global read only,, bss for uniitialized data. sections are not required to run a binary
     - symbols - 
    - segments - where to load

    readelf, objdump, nm - reads symbols, patchelf, objcopy, strip, kaitai struct https://www.intezer.com/blog/malware-analysis/executable-linkable-format-101-part-2-symbols/

### process loading
https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-4.html
   what to load. look for #! or elf magic. /proc/sys/fs/binsmt_misc can match a string there. hand off to elf defined interpeter is dynamically linked.

   Then it's onto ld probably. 
   LD_PRELOAD,, LD_LIBRARY_PATH,, DT_RUNTIME in binary file,, system wide /etc/ld.so.conf, /lib and /usr/lib
   relocations updated
   /proc/self/maps
   https://gist.github.com/CMCDragonkai/10ab53654b2aa6ce55c11cfc5b2432a4
   libc is almost always linked.
   printf, scanf, socket, atoi, amlloc, free

# shellcode
    
## Protection
ASLR - Addresses are randomized
cat /proc/mem/self ? To look at what actually loaded
Also ldd shows were libraries get loaded in memory
Stack canaries - set once per binary run, so with forking you can brute force them or maybe leak them?

checksec tells you about which things are enabled.

gcc options
-no-pie
-no-stack-protection

## pwntools 
attaching to gdb and/or a process is really useful.
cyclic bytes can let you localize what ends up where in a buffer overflow for example
cyclic_find

## Examples from pwn.college
